<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wiki.spring.mapper.EbookSnapshotMapperCust">

    <!--
    # 方案一（ID不连续）：
    #   删除今天的数据
    #   为所有的电子书生成一条今天的记录
    #   更新总阅读数、总点赞数
    #   更新今日阅读数、今日点赞数
    # 方案二（ID连续）：
    #   为所有的电子书生成一条今天的记录，如果还没有
    #   更新总阅读数、总点赞数
    #   更新今日阅读数、今日点赞数
    -->

    <update id="initSnapshot">
        insert into ebook_snapshot(ebook_id, `create_time`, view_count, vote_count, view_increase, vote_increase)
        select t1.id, curdate(), 0, 0, 0, 0
        from ebook t1
        where not exists(select 1
                         from ebook_snapshot t2
                         where t1.id = t2.ebook_id
                           and t2.`create_time` = curdate());
    </update>
    <!--更新今日阅读数、今日点赞数-->
    <update id="updateToday">
        update ebook_snapshot t3, ebook t4
        set t3.view_count = t4.view_count,
            t3.vote_count = t4.vote_count
        where t3.`create_time` = curdate()

    </update>

    <!--更新总阅读数、总点赞数-->
    <update id="updateTodaySum">
        update ebook_snapshot t5 left join (select ebook_id, view_count, vote_count
            from ebook_snapshot
            where `create_time` = date_sub(curdate(), interval 1 day)) t6
        on t5.ebook_id = t6.ebook_id
            set t5.view_increase = (t6.view_count - ifnull(t6.view_count, 0)),
                t5.vote_increase = (t6.vote_count - ifnull(t6.vote_count, 0))
        where t5.`create_time` = curdate();
    </update>

    <!-- 获取首页数值数据：总阅读数、总点赞数、今日阅读数、今日点赞数、今日预计阅读数、今日预计阅读增长 -->
    <select id="getStatistic" resultType="com.wiki.spring.resp.StatisticResp">
        select t1.`create_time`      as `create_time`,
               sum(t1.view_count)    as viewCount,
               sum(t1.vote_count)    as voteCount,
               sum(t1.view_increase) as viewIncrease,
               sum(t1.vote_increase) as voteIncrease
        from ebook_snapshot t1
        where t1.`create_time` >= date_sub(curdate(), interval 1 day)
        group by t1.`create_time`
        order by t1.`create_time` asc;
    </select>

    <select id="get30Statistic" resultType="com.wiki.spring.resp.StatisticResp">
        select t1.`create_time`      as `create_time`,
               sum(t1.view_increase) as viewIncrease,
               sum(t1.vote_increase) as voteIncrease
        from ebook_snapshot t1
        where t1.`create_time` between date_sub(curdate(), interval 30 day) and date_sub(curdate(), interval 1 day)
        group by t1.`create_time`
        order by t1.`create_time` asc;
    </select>

</mapper>
